require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe BrigadeProjectsController, :type => :controller do

  include_context 'user logged in'

  let(:valid_attributes) {
    {
        'brigade_id' => '1',
        'title' => 'Timbuktu',
        'description' => 'Save the planet, one step at atime'
    }
  }

  let(:invalid_attributes) {
    {
        'brigade_id' => '1',
        'description' => 'Save the planet, one step at atime'
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BrigadeProjectsController. Be sure to keep this updated too.
  let(:valid_session) { {'locale' => 'en'} }

  describe "GET #index" do
    it "assigns all brigade_projects as @brigade_projects" do
      brigade_project = BrigadeProject.create! valid_attributes
      get :index, {'locale' => 'en'}, valid_session
      expect(assigns(:brigade_projects)).to eq([brigade_project])
    end
  end

  describe "GET #show" do
    it "assigns the requested brigade_project as @brigade_project" do
      brigade_project = BrigadeProject.create! valid_attributes
      get :show, {:id => brigade_project.to_param, 'locale' => 'en'}, valid_session
      expect(assigns(:brigade_project)).to eq(brigade_project)
    end
  end

  describe "GET #new" do
    it "assigns a new brigade_project as @brigade_project" do
      get :new, {'locale' => 'en'}, valid_session
      expect(assigns(:brigade_project)).to be_a_new(BrigadeProject)
    end
  end

  describe "GET #edit" do
    it "assigns the requested brigade_project as @brigade_project" do
      brigade_project = BrigadeProject.create! valid_attributes
      get :edit, {:id => brigade_project.to_param, 'locale' => 'en'}, valid_session
      expect(assigns(:brigade_project)).to eq(brigade_project)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new BrigadeProject" do
        expect {
          post :create, {:brigade_project => valid_attributes, 'locale' => 'en'}
        }.to change(BrigadeProject, :count).by(1)
      end

      it "assigns a newly created brigade_project as @brigade_project" do
        post :create, {:brigade_project => valid_attributes, 'locale' => 'en'}, valid_session
        expect(assigns(:brigade_project)).to be_a(BrigadeProject)
        expect(assigns(:brigade_project)).to be_persisted
      end

      it "redirects to the created brigade_project" do
        post :create, {:brigade_project => valid_attributes, 'locale' => 'en'}, valid_session
        expect(response).to redirect_to(BrigadeProject.last)
      end
    end

  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
            'brigade_id' => '1',
            'title' => 'Timbuk2',
            'description' => 'Save the planet, one step at atime'
        }
      }

      it "updates the requested brigade_project" do
        brigade_project = BrigadeProject.create! valid_attributes
        put :update, {:id => brigade_project.to_param, 'locale' => 'en', :brigade_project => new_attributes}, valid_session
        brigade_project.reload
        expect(assigns(:brigade_project)[:title]).to eq(new_attributes['title'])
      end

      it "assigns the requested brigade_project as @brigade_project" do
        brigade_project = BrigadeProject.create! valid_attributes
        put :update, {:id => brigade_project.to_param, 'locale' => 'en', :brigade_project => valid_attributes}, valid_session
        expect(assigns(:brigade_project)).to eq(brigade_project)
      end

      it "redirects to the brigade_project" do
        brigade_project = BrigadeProject.create! valid_attributes
        put :update, {:id => brigade_project.to_param, 'locale' => 'en', :brigade_project => valid_attributes}, valid_session
        expect(response).to redirect_to(brigade_project)
      end
    end

    context "with invalid params" do
      it "assigns the brigade_project as @brigade_project" do
        brigade_project = BrigadeProject.create! valid_attributes
        put :update, {:id => brigade_project.to_param, 'locale' => 'en', :brigade_project => invalid_attributes}, valid_session
        expect(assigns(:brigade_project)).to eq(brigade_project)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested brigade_project" do
      brigade_project = BrigadeProject.create! valid_attributes
      expect {
        delete :destroy, {:id => brigade_project.to_param, 'locale' => 'en'}, valid_session
      }.to change(BrigadeProject, :count).by(-1)
    end

    it "redirects to the brigade_projects list" do
      brigade_project = BrigadeProject.create! valid_attributes
      delete :destroy, {:id => brigade_project.to_param, 'locale' => 'en'}, valid_session
      expect(response).to redirect_to(brigade_projects_url)
    end
  end

end
